@using Sandbox;
@using Sandbox.Network
@using Sandbox.UI;

@inherits Panel
@implements INavigatorPage
@namespace Facepunch.UI

<root class="hc1">
    <div class="layout padding-insane column">
        <div class="logo">
            <img src="/ui/teams/operators_logo_banner.png" />
        </div>
    </div>

    <div class="layout flex-grow" />

    <div class="layout padding-insane column gap" style="width: 30%;">
        <label class="text">Map</label>
        <OptionSelect @ref=MapDropDown
                text="@SelectedMap?.SceneFile?.Title"
                value.changed=@MapDropDown_ValueChanged>
        </OptionSelect>

        <label class="text">Game mode</label>
        <OptionSelect @ref=GameModeDropDown
                text="@SelectedGameMode?.Title"
                value.changed=@GameModeDropDown_ValueChanged>
        </OptionSelect>
    </div>

    <div class="layout flex-grow" />

    <div class="layout padding-insane column" style="width: 30%;">
        <div class="layout column gap">
            <div class="button standard" onclick=@Join>start game</div>
            <a class="button standard" href="/">return</a>
        </div>
    </div>
</root>

@code
{
    // TODO: map selection

    private GameModeInfo _selectedGameMode;

    public IReadOnlyList<GameModeInfo> GameModes { get; private set; }

    public GameModeInfo SelectedGameMode
    {
        get => _selectedGameMode;
        set
        {
            _selectedGameMode = value;
            GameMode.ActivePath = value?.Path;
        }
    }

    private MapSystem.Map _selectedMap;
    public MapSystem.Map SelectedMap
    {
        get => _selectedMap;
        set
        {
            _selectedMap = value;
        }
    }

    public OptionSelect GameModeDropDown { get; private set; }
    public OptionSelect MapDropDown { get; private set; }

    public void OnNavigationOpen()
    {
        SelectedMap = MapSystem.All.FirstOrDefault();
        GameModes = GameMode.GetAll( SelectedMap.SceneFile );
        SelectedGameMode = GameModes.FirstOrDefault();
    }

    private void Join()
    {
        Log.Info( $"{SelectedGameMode.Path}" );

        Game.ActiveScene.Load( SelectedMap.SceneFile );
    }

    private void GameModeDropDown_ValueChanged( PanelEvent ev )
    {
        SelectedGameMode = ev.Value as GameModeInfo;
    }

    private void MapDropDown_ValueChanged( PanelEvent ev )
    {
        SelectedMap = ev.Value as MapSystem.Map;

        // Update supported gamemodes
        GameModes = GameMode.GetAll( SelectedMap.SceneFile );
        GameModeDropDown.Options = GameModes
            .Select( x => new Option( x.Title, x ) )
            .ToList();

        SelectedGameMode = GameModes.FirstOrDefault();
    }

    protected override void OnAfterTreeRender( bool firstTime )
    {
        base.OnAfterTreeRender( firstTime );

        if ( !firstTime ) return;

        GameModeDropDown.Options = GameModes
            .Select( x => new Option( x.Title, x ) )
            .ToList();

        MapDropDown.Options = MapSystem.All
            .Select( x => new Option( x.SceneFile.Title, x ) )
            .ToList();
    }
}
