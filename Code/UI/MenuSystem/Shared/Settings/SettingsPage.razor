@using Sandbox;
@using Sandbox.UI;

@implements INavigatorPage
@namespace Facepunch.UI

<root class="hc1">
    <div class="layout column padding-insane">
        <div class="logo">
            <img src="/ui/teams/operators_logo_banner.png" />
        </div>
    </div>

    <div class="layout padding-insane-x with-scroll-x row with-gap" style="padding-bottom: 16px;">
            @foreach ( var grouping in TypeLibrary.GetPropertyDescriptions( GameSettingsSystem.Current ).GroupBy( x => x.Group )  )
            {
                <div class="button standard no-anim extra-x-padding @(SelectedGroup == grouping.Key ? "selected" : "")" onclick=@(() => SetGroup( grouping.Key ) )>@grouping.Key</div>
            }
    </div>

    <div class="layout padding-insane-x with-scroll with-gap column">
        @if ( !string.IsNullOrEmpty( SelectedGroup ) )
        {
            @foreach ( var property in TypeLibrary.GetPropertyDescriptions( GameSettingsSystem.Current ).Where( x => x.Group == SelectedGroup ) )
            {
                <SettingEntry Target=@GameSettingsSystem.Current Description=@property />
            }
        }
    </div>

    <div class="layout flex-grow" />

    <div class="layout padding-insane column" style="width: 30%;">
        <div class="layout column gap">
            <div class="button standard" onclick=@(() => Game.Overlay.ShowBinds())>
                EDIT INPUT BINDINGS
            </div>

            <button class="button standard" onclick=@(()=>Save())>Save</button>
            <a class="button standard" href="/">Return</a>
        </div>
    </div>
</root>

@code
{
    private string SelectedGroup { get; set; } = null;

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( firstTime )
        {
            // Get the first group
            var first = TypeLibrary.GetPropertyDescriptions( GameSettingsSystem.Current ).FirstOrDefault();
            SetGroup( first.Group );
        }
    }

    private void SetGroup( string group )
    {
        SelectedGroup = group;
        StateHasChanged();
    }

    void Save()
    {
        GameSettingsSystem.Save();
    }
}
