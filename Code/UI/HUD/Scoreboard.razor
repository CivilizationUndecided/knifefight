@using System;
@using Sandbox.UI;

@namespace Facepunch.UI
@inherits Panel

@attribute [StyleSheet]

<root class="center with-background with-padding-lg">
    <table>
        <div class="title">
            <label class="emphasis">@Status</label>
            <label class="emphasis">@(Time?.ToString(@"m\:ss"))</label>
        </div>

        @foreach ( var group in GroupedPlayers )
        {
            @if ( group.Key == Team.Unassigned )
            {
                <div class="flex gap-sm">
                    <label class="small">Spectators:</label>
                    <label class="small">@(string.Join( ", ", group.Select( x => x.GetPlayerName() ) )</label>
                </div>
            }
            else
            {
                <span class="flex align-center gap-sm">
                    <img class="icon" src="@group.Key.GetIconPath()" style="background-image-tint: @group.Key.GetColor().Hex" />
                    <label class="with-py" style="color: @group.Key.GetColor().Hex">@group.Key.GetName()</label>
                </span>

                <div class="row header with-px-lg with-py-sm">
                    <label class="col stat small"></label>
                    <label class="col stat-small small"></label>
                    <label class="col playername small"></label>
                    <label class="col stat-large small">Balance</label>
                    <label class="col stat small">Score</label>
                    <label class="col stat small">Kills</label>
                    <label class="col stat small">Deaths</label>
                    <label class="col stat small">Ratio</label>
                </div>

                @foreach ( var player in group )
                {
                    <ScoreboardRow Player="@player" />
                }
            }
        }
    </table>
</root>

@code
{
    public string Status => GameMode.Instance?.DisplayedStatus;
    public TimeSpan? Time => GameMode.Instance?.DisplayedTime;

    public IEnumerable<PlayerController> PlayerList => Scene.GetAllComponents<PlayerController>();

    private List<IGrouping<Team, PlayerController>> GroupedPlayers
    {
        get
        {
            var sortedPlayers = PlayerList.OrderByDescending(x => x.Components.Get<PlayerScore>().Score);
            var groupedPlayers = sortedPlayers.GroupBy(x => x.TeamComponent.Team);
            return groupedPlayers.ToList();
        }
    }

    public bool IsActive => Input.Down("score");

    protected override int BuildHash()
    {
        return HashCode.Combine(GroupedPlayers, Status, Time, GameUtils.AllPlayers, IsActive);
    }

    public override void Tick()
    {
        SetClass( "active", IsActive );
    }
}
