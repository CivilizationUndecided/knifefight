@namespace Facepunch
@attribute [StyleSheet]

<root class="with-background with-rounding">
    @if (Renderer.IsValid())
    {
        <div>
            <div class="minimap" style="background-image: url( @Renderer.CurrentMinimapPath );" />
            <div class="overlay" style="background-image: url( @Renderer.CurrentMinimapPath );" />

            <div class="markers">
                @foreach (var marker in MarkedObjects)
                {
                    if (!ShowMarker(marker))
                    {
                        continue;
                    }
                    if (IsDead(marker))
                    {
                        <div class="marker dead" style="@WorldToMap(marker)" />
                    }
                    else
                    {
                        <div class="marker @(ViewingPlayer(marker))" style="@WorldToMap(marker) @RotationToMap(marker) @TeamColor(marker)" />
                    }
                }
                @foreach (var bombZone in Game.ActiveScene.GetAllComponents<BombSite>())
                {
                    <div class="bombsite" style="@WorldToMap(bombZone.GameObject)">
                        @BombSiteIntToAlphabet(bombZone.Index)
                        <div class="bombzone" style="@GetBox(bombZone)" />
                    </div>
                }
                @foreach (var buyZone in Game.ActiveScene.GetAllComponents<BuyZone>())
                {
                    <div class="buysite" style="@WorldToMap(buyZone.GameObject) @GetTeamIcon(buyZone) @TeamColor(buyZone)">
                        <div class="buyzone" style="@GetBox(buyZone)" />
                    </div>
                }
                @if ( ( GameUtils.LocalPlayer?.IsSpectating ?? false ) && ( SpectateSystem.Instance?.IsFreecam ?? false ) )
                {
                    <div class="marker" style="@WorldToMap(Scene.Components.GetAll<SpectateController>().FirstOrDefault().GameObject) @RotationToMap(Scene.Components.GetAll<SpectateController>().FirstOrDefault().Transform.Rotation.Angles())" />
                }
            </div>
        </div>
    }
</root>

@code
{
    public MinimapRenderer Renderer => Game.ActiveScene.GetAllComponents<MinimapRenderer>().FirstOrDefault();

    public IEnumerable<IMarkerObject> MarkedObjects => Game.ActiveScene.GetAllComponents<IMarkerObject>();

    public override void Tick()
    {
        base.Tick();
    }

    bool ShowMarker(IMarkerObject obj)
    {
        var ply = obj.GameObject.Components.Get<TeamComponent>();

        if (!ply.IsValid()) return false;

        if (obj.GameObject.Tags.Has("invis"))
            return false;

        if (GameUtils.LocalPlayer?.IsSpectating ?? false)
        {
            return true;
        }

        return ply.Team == GameUtils.Viewer?.TeamComponent.Team;
    }

    bool IsSpectating()
    {
        return GameUtils.LocalPlayer?.IsSpectating ?? false;
    }

    string GetTeamIcon(BuyZone obj)
    {
        return $"background-image: url( '{obj.Team.GetIconPath()}' ); background-image-tint: {obj.Team.GetColor().Hex};";
    }

    string BombSiteIntToAlphabet(int i)
    {
        return ((char)(i + 65)).ToString();
    }

    string TeamColor (IMarkerObject obj)
    {
        var ctl = obj.GameObject.Components.Get<PlayerController>();
        if(ctl == GameUtils.Viewer)
        {
            return "background-image-tint: rgba( 0, 255, 255, 1 )";
        }

        var ply = obj.GameObject.Components.Get<TeamComponent>();

        return $"background-image-tint: {ply.Team.GetColor().Hex}";
    }

    string TeamColor(BuyZone obj)
    {
        var ply = obj.Team;

        return $"background-image-tint: {ply.GetColor().Hex}";
    }

    bool IsDead(IMarkerObject obj)
    {
        var controller = obj.GameObject.Components.Get<HealthComponent>();
        return controller.State == LifeState.Dead;
    }

    string ViewingPlayer(IMarkerObject obj)
    {
        var ply = obj.GameObject.Components.Get<PlayerController>();

        return ply == GameUtils.Viewer ? "viewer" : "";
    }

    string WorldToMap(IMarkerObject obj)
    {
        var toScreen = Renderer.RemapCoords(obj.GameObject.Transform.LocalPosition);

        return $"left: {Length.Fraction(toScreen.x)}; top: {Length.Fraction(toScreen.y)};";
    }

    string WorldToMap(GameObject obj)
    {
        var toScreen = Renderer.RemapCoords(obj.Transform.LocalPosition);

        return $"left: {Length.Fraction(toScreen.x)}; top: {Length.Fraction(toScreen.y)};";
    }

    string GetBox(BombSite site)
    {
        //This poop but do for now.
        var size = site.GameObject.Components.Get<BoxCollider>();
        return $"width:{size.Scale.y / 20}px; height:{size.Scale.x / 20}px;";
    }

    string GetBox(BuyZone site)
    {
        //This poop but do for now.
        var size = site.GameObject.Components.Get<BoxCollider>();
        return $"width:{size.Scale.y / 20}px; height:{size.Scale.x / 20}px;";
    }

    string RotationToMap(IMarkerObject obj)
    {
        var ply = obj.GameObject.Components.Get<PlayerController>();

        var head = ply.EyeAngles;

        return $"transform: translateX(-50%) translateY(-50%) rotate({-head.yaw}deg);";
    }

    string RotationToMap(GameObject obj)
    {
        var ply = obj.Components.Get<PlayerController>();

        var head = ply.EyeAngles;

        return $"transform: translateX(-50%) translateY(-50%) rotate({-head.yaw}deg);";
    }

    string RotationToMap(Angles rot)
	{
		return $"transform: translateX(-50%) translateY(-50%) rotate({-rot.yaw}deg);";
	}

    protected override int BuildHash()
    {
        return System.HashCode.Combine( Time.Now );
    }
}