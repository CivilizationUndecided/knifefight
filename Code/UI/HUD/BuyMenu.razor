@namespace Facepunch.UI
@inherits Panel
@attribute [StyleSheet]

@if ( !Player.IsValid() ) return;

<root class="flex absolute inset-0 align-center justify-center hidden @(Player.InBuyMenu ? "visible" : "")">
    <div class="flex column with-padding gap-sm">

        <div class="with-background with-padding">
            <label class="emphasis">$@Player.Inventory.Balance.ToString("N0")</label>
        </div>

        <div class="with-rounding flex row gap-sm">

        @foreach (WeaponSlot slot in Enum.GetValues(typeof(WeaponSlot)))
        {
            var weapons = WeaponData.All.Where( W => W.IsPurchasableForTeam( Player.TeamComponent.Team ) && W.Slot == slot );
            if (weapons.Count() < 1)
                continue;

            if (slot == WeaponSlot.Melee || slot == WeaponSlot.Special)
                continue;

            <div class="flex column shrink-0 with-background">
                <label class="title text-center with-padding">@slot</label>
                <div class="flex column gap-sm with-padding">
                    @foreach (WeaponData weaponData in weapons)
                    {
                        <div class="button @slot @(@Inventory.HasWeapon( weaponData ) ? "owned" : "unowned") @(@CanAfford( weaponData ) ? "" : "unaffordable" )" onclick=@(() => BuyWeapon( weaponData ))>
                            <label>@weaponData.Name</label>

                            @if ( !string.IsNullOrEmpty( weaponData.Icon ) )
                            {
                                <div class="gunicon" style="background-image:url(@weaponData.Icon);" />
                            }

                            <label class="price">$@weaponData.Price.ToString("N0")</label>
                        </div>
                    }
                </div>
            </div>
        }

        </div>

        <div class="with-rounding flex row gap-sm">
            <div class="flex column shrink-0 with-background grow">
                <label class="title text-center with-padding">Equipment</label>
                <div class="flex row gap-sm with-padding">
                    @foreach (var equipment in EquipmentData.GetAll())
                    {
                        @if (!equipment.IsVisible(Player))
                            continue;

                        <div class="button grow equipment @(equipment.IsOwned(Player) ? "owned" : "unowned") @(@CanAfford( equipment ) ? "" : "unaffordable" )" onclick=@(() => BuyEquipment( equipment ))>
                            <label>@equipment.Name</label>

                            @if (!string.IsNullOrEmpty(equipment.Icon))
                            {
                                <div class="gunicon" style="background-image:url(@equipment.Icon);" />
                            }

                            <label class="price">$@equipment.GetPrice(Player).ToString("N0")</label>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</root>

@code
{
    public PlayerInventory Inventory => Player.Inventory;
    public PlayerController Player => GameUtils.Viewer;

    private void BuyWeapon( WeaponData weaponData )
    {
        if ( !CanAfford( weaponData ) )
            return;

        Sound.Play( "buy" );

        Inventory.BuyWeapon( weaponData.ResourceId );
    }

    private void BuyEquipment( EquipmentData equipmentData )
    {
        if ( !CanAfford( equipmentData ) )
            return;

        Sound.Play( "buy" );

        Inventory.BuyEquipment( equipmentData.Id );
    }

    private bool CanAfford( WeaponData weaponData )
    {
        return Inventory.Balance >= weaponData.Price;
    }

    private bool CanAfford(EquipmentData equipmentData)
    {
        return Inventory.Balance >= equipmentData.GetPrice(Player);
    }

    protected override int BuildHash()
    {
        return !Player.IsValid() ? 0 : HashCode.Combine( Inventory.Weapons.Count(), Player.InBuyMenu );
    }
}
