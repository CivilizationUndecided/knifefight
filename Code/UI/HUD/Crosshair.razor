@namespace Facepunch.UI
@inherits Panel
@attribute [StyleSheet]

<root>
    <div class="guide"/>

    @if ( IsFriendly )
    {
       <i>close</i>
    }
    else
    {
        <div @ref="Left" class="left element"></div>
        <div @ref="Right" class="right element"></div>
        <div @ref="Top" class="top element"></div>
        <div @ref="Bottom" class="bottom element"></div>
        <div class="dot element" />
    }


    <div @ref="Hitmarker" class="hitmarker @HitmarkerClasses" />
</root>

@code
{
    public Panel Left { get; set; }
    public Panel Right { get; set; }
    public Panel Top { get; set; }
    public Panel Bottom { get; set; }

    public Panel Hitmarker { get; set; }

    PlayerController Player => GameUtils.Viewer;
    Weapon Weapon => Player.CurrentWeapon;

    private TimeUntil TimeUntilHitmarkerRemove = 0f;
    private float HitMarkerDuration => 0.1f;

    public static Crosshair Instance { get; set; }

    private bool IsFriendly { get; set; } = false;
    private bool IsEnemy { get; set; } = false;

    protected override void OnAfterTreeRender( bool firstTime )
    {
        if ( firstTime )
        {
            Instance = this;
        }
    }

    string HitmarkerClasses => !TimeUntilHitmarkerRemove ? "is-visible" : string.Empty;

    private ShootWeaponComponent Shoot => Weapon?.Components.Get<ShootWeaponComponent>( FindMode.EnabledInSelfAndDescendants );
    private ScopeWeaponComponent Scope => Weapon?.Components.Get<ScopeWeaponComponent>( FindMode.EnabledInSelfAndDescendants );
    private RecoilWeaponComponent Recoil => Weapon?.Components.Get<RecoilWeaponComponent>( FindMode.EnabledInSelfAndDescendants );

    float BaseDistance => 15 + (( Shoot?.BulletSpread ?? 0 ) * 250f);
    // 10px base size
    float BaseElementSize => 10;

    public void Trigger( float damage, Component component, Vector3 position, string hitbox = "" )
    {
        if ( component is HealthComponent hc )
        {
            var isKill = hc.Health <= 0f;
            TimeUntilHitmarkerRemove = isKill ? 0.5f : 0.2f;
            Hitmarker.SetClass( "is-kill", isKill );
            Hitmarker.SetClass( "is-headshot", hitbox.Contains( "head" ) );
        }
    }

    float VelocityScale => MathF.Abs( Player.CharacterController.Velocity.Length ).LerpInverse( 0, 700f, true );
    float VelocityScaleFactor => 3000;

    public float Distance => GetDistance();

    private float LerpedDistance = 15;

    float GetDistance()
    {
        var dist = BaseDistance;

        // velocity
        dist += VelocityScale * VelocityScaleFactor;

        if ( Recoil.IsValid() )
        {
            dist += Recoil.Current.AsVector3().Length * 1024;
        }

        return dist.Clamp( 0, 70 );
    }

    Length? GetLength()
    {
        var size = BaseElementSize;
        var dist = GetDistance() - BaseDistance;
        size += dist * 0.2f;

        return Length.Pixels( size );
    }

    void UpdateDistance()
    {
        if (!Left.IsValid()) return;

        LerpedDistance = LerpedDistance.LerpTo( Distance, Time.Delta * 7.5f );

        var length = GetLength();
        var distance = LerpedDistance;

        Left.Style.Left = -distance;
        Left.Style.Width = length;

        Right.Style.Left = distance;
        Right.Style.Width = length;

        Top.Style.Top = -distance;
        Top.Style.Height = length;

        Bottom.Style.Top = distance;
        Bottom.Style.Height = length;
    }

    public override void Tick()
    {
        var player = Player;
        if (!player.IsValid()) return;

        UpdateDistance();

        var camera = player.CameraController.Camera;
        var range = 100000f;
        var muzzle = Weapon?.ViewModel?.ModelRenderer.GetAttachment( "muzzle" );
        var origin = muzzle.HasValue ? muzzle.Value.Position : camera.Transform.Position;

        var currentTrace = player.Scene.Trace.Ray( origin, camera.Transform.Rotation.Forward * range )
            .IgnoreGameObjectHierarchy( player.GameObject )
            .WithoutTags( "invis", "ragdoll", "movement" )
            .UseHitboxes()
            .Run();

        if ( currentTrace.Hit )
        {
            var targetPlayer = currentTrace.GameObject.Root.Components.Get<PlayerController>();
            if (targetPlayer.IsValid())
            {
                var friendly = targetPlayer.IsFriendly(GameUtils.Viewer);
                IsFriendly = friendly;
                IsEnemy = !friendly;
            }
            else
            {
                IsEnemy = false;
                IsFriendly = false;
            }

            SetClass( "enemy", IsEnemy );
            SetClass( "friendly", IsFriendly );
        }
        else
        {
            SetClass( "enemy", false );
            SetClass( "friendly", false );

        }

        SetClass( "hidden", Scope?.IsZooming ?? false );
    }

    protected override int BuildHash()
    {
        return HashCode.Combine(Time.Now);
    }
}
