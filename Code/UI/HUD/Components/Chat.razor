@using Sandbox;
@using Sandbox.UI;
@using Facepunch.UI;
@using Facepunch;

@inherits PanelComponent
@implements Component.INetworkListener

<root class="hud flex column-reverse with-deadzone top-right gap-sm">

    <div class="hud flex column justify-start gap-sm">
        @foreach (var entry in Entries)
        {
            <div class="hud with-background with-padding flex row gap">

                @if (entry.steamid > 0)
                {
                    <div class="square rounded" style="background-image: url( avatar:@entry.steamid )"></div>
                }

                <span class="flex column">
                    <span class="flex row gap-sm">
                    @if ( entry.chatMode == ChatModes.Team )
                    {
                        <label class="emphasis">[TEAM]</label>
                    }
                    <label class="emphasis">@entry.author</label>
                    </span>
                    <label class="message">@entry.message</label>
                </span>
            </div>
        }
    </div>

    <div class="hud with-background with-padding flex align-center gap-sm">
        <label class="emphasis">
            @ChatMode
        </label>

        <ChatBox class="input" @ref="InputBox" OnTabPressed="@ChangeChatMode" onsubmit="@ChatFinished" placeholder="Press ENTER to chat"></ChatBox>
    </div>

</root>

@code
{
    public enum ChatModes
    {
        Team,
        All,
    }

    ChatModes ChatMode = ChatModes.All;
    TextEntry InputBox;

    public record Entry(ulong steamid, string author, string message, RealTimeSince timeSinceAdded, ChatModes chatMode);
    List<Entry> Entries = new();

    protected override int BuildHash()
    {
        return HashCode.Combine(ChatMode);
    }

    protected override void OnUpdate()
    {
        if (InputBox is null)
            return;

        Panel.AcceptsFocus = false;

        if (Input.Pressed("chat"))
        {
            InputBox.Focus();
        }

        if (Entries.RemoveAll(x => x.timeSinceAdded > 20.0f) > 0)
        {
            StateHasChanged();
        }

        SetClass("open", InputBox.HasFocus);
    }

    void ChangeChatMode()
    {
        ChatMode = ChatMode == ChatModes.All ? ChatModes.Team : ChatModes.All;

        Log.Info($"Chat mode changed to {ChatMode}");
    }

    void ChatFinished()
    {
        var text = InputBox.Text;
        InputBox.Text = "";

        if (string.IsNullOrWhiteSpace(text))
            return;

        if (ChatMode == ChatModes.Team)
        {
            var localPlayer = GameUtils.LocalPlayer;
            bool IsFriendly(PlayerController x) => localPlayer.GameObject.IsFriendly(x.GameObject) || localPlayer.GameObject == x.GameObject;

            var players = GameUtils.AllPlayers;
            var friendlyGameObjects = players.Where(IsFriendly);
            var friendlyConnections = friendlyGameObjects.Select(x => x.Network.OwnerConnection);

            using (var _ = Rpc.FilterInclude(friendlyConnections))
            {
                AddText(text, ChatMode);
            }
        }
        else
        {
            AddText(text, ChatMode);
        }
    }

    [Broadcast]
    public void AddText(string message, ChatModes chatMode)
    {
        message = message.Truncate(300);

        if (string.IsNullOrWhiteSpace(message))
            return;

        var author = Rpc.Caller.DisplayName;
        var steamid = Rpc.Caller.SteamId;

        Entries.Add(new Entry(steamid, author, message, 0.0f, chatMode));
        StateHasChanged();
    }

    [Broadcast] // todo: only from host/owner
    public void AddSystemText(string message)
    {
        message = message.Truncate(300);

        if (string.IsNullOrWhiteSpace(message))
            return;

        Entries.Add(new Entry(0, "ℹ️", message, 0.0f, ChatModes.All));
        StateHasChanged();
    }

    void Component.INetworkListener.OnConnected(Connection channel)
    {
        if (IsProxy) return;

        AddSystemText($"{channel.DisplayName} has joined the game");
    }

    void Component.INetworkListener.OnDisconnected(Connection channel)
    {
        if (IsProxy) return;

        AddSystemText($"{channel.DisplayName} has left the game");
    }
}
