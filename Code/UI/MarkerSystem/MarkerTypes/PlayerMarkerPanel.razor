@inherits BaseMarkerPanel
@namespace Facepunch.UI

<style>
    PlayerMarkerPanel
    {
        justify-content: flex-end;
        align-items: center;
        flex-direction: column-reverse;
        text-shadow: 1px 1px 1px rgba( black, 1 );
       
        .dot
        {
            width: 8px;
            height: 8px;
            border-radius: 100px;
            background-color: @Player.TeamComponent.Team.GetColor().Hex;
            box-shadow: 2px 2px 2px rgba( black, 0.5 );
        }

        .name
        {
            text-shadow: 1px 1px 1px rgba( black, 1 );
            color: @Player.TeamComponent.Team.GetColor().Hex;
        }

        .chevron 
        {
            font-size: 30px;
            font-weight: 900;
            color: @Player.TeamComponent.Team.GetColor().Hex;
        }
    }
</style>

<root>
    @if ( !Player.IsValid() )
        return;

    @if ( !LocalPlayer.IsValid() )
        return;

    @if ( !Marker.IsValid() ) return;

    @if ( Marker.IsBehind ) 
        return;

    @if ( Player?.HealthComponent?.State != LifeState.Alive )
        return;

    @*TODO: make the player markers show up for enemies under certain circumstances
    when aiming at a player that's kinda close to you, spectator mode? *@
    @if ( !LocalPlayer.GameObject.IsFriendly( Player.GameObject ) )
        return;

    @if ( Marker.IsOffScreen )
    {
        <label class="chevron" style="transform: rotateZ(@(ChevronAngle)deg);">></label>
    }
    else
    {
        <div class="dot" />
        <label class="name">@MarkerFrame.DisplayText</label>
    }
</root>

@code
{
    public PlayerController Player => Object?.GameObject?.Components?.Get<PlayerController>();
    private PlayerController LocalPlayer => Scene.GetSystem<PawnSystem>().Viewer as PlayerController;

    private float ChevronAngle => Scene.Camera.PointToScreenNormal(MarkerFrame.Position).Angle(new(0.5f, 0.5f)) - 180f; 

    protected override void OnAfterTreeRender( bool firstTime )
    {
        Marker.ClampToScreen = true;
    }

    protected override int BuildHash()
    {
        return System.HashCode.Combine( Time.Now );
    }
}
